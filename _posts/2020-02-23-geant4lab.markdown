---
layout: post
title:  "Medical physics with Geant4 + Docker = ‚ù§Ô∏è"
date:   2020-02-23
author: "Alberto Corbi (UNIR iTED), Francisco Albiol (IFIC-CSIC), Frack Vidal (Bangor Uni), Daniel Burgos (UNIR iTED) and Alberto Albiol (UPV)."
tags: [beginner, Geant4, particle physics, medical physics]
categories: beginner
terms: 1

---

![](https://tva1.sinaimg.cn/large/00831rSTgy1gcj6lhk6srj31lc0ksdoa.jpg)

In this lab we will learn about the basics of low and mid-energy radiation-matter interaction with the help of [Geant4](https://geant4.web.cern.ch/geant4/), the Geant4 binding for Python ([g4py](https://gitlab.cern.ch/geant4/geant4/blob/master/environments/g4py/README.md)),  and of course, our beloved Docker. This lab may fall into the recent (and praiseworthy) trend related to the so called *[reproducible research](https://www.researchgate.net/profile/Carl_Boettiger/publication/266477818_An_introduction_to_Docker_for_reproducible_research_with_examples_from_the_R_environment/links/56e81ce508ae9aecadbaca56/An-introduction-to-Docker-for-reproducible-research-with-examples-from-the-R-environment.pdf?_sg%5B0%5D=98jcI0oukjCz_zwDtOe9nXl_rTsULpFEgS5NSqVYu6vTMAD9OSLNamM_AikeK9fZ8EQ8jJOikPLNUbCNslzckw.7kVkDKbcq_mR5Oxx2Fs0VjUrVXGcbn1-3XGJCLgznKN9YJW_O4NeIa2Sq__GbpSILXrYgBnO92d3jNdJPN6v6g&_sg%5B1%5D=Uc-IV8Be_BJSbvZve1HCV6YsdFeB1yzhuQp4jEuuqecUOxUyKQt1Samh4Ad_xRNNG1jLlI2Txx1oscSYWTeCMF819aMxk5wl2zx6X5sGL52B.7kVkDKbcq_mR5Oxx2Fs0VjUrVXGcbn1-3XGJCLgznKN9YJW_O4NeIa2Sq__GbpSILXrYgBnO92d3jNdJPN6v6g&_iepl=)* and *[Open Educational Resources as a Service](https://ieeexplore.ieee.org/document/7555277)*. This PWD/Docker-based experience has been carried out with huge success at **Universidad Internacional de La Rioja (UNIR)**, as described in this [*research paper*](https://iopscience.iop.org/article/10.1088/1361-6404/ab5011). 

------



## Simulating the building blocks of Reality

To begin with, let's start by summarising what is **Geant4** and why it is so important in todays particle physics research. As very well stated by [Agostinelli et al.](https://www.sciencedirect.com/science/article/pii/S0168900203013688):

> <img src="https://www.fib.upc.edu/sites/fib/files/logo-cern.jpg" style="float:right;width:170px;height:142px;">*Geant4 is a toolkit for simulating the **passage of particles through matter**. Its functionalities include **tracking**, **geometry**, **physics** models and **hits**. The physics processes take into account **electromagnetic**, **hadronic** and **optical** processes, as well as the surrounding **materials**, over a **wide energy range**. The toolkit is the result of a worldwide collaboration of **physicists** and software **engineers**. It has been implemented in the **C++** programming language. It has been used in applications in **Particle Physics**, **Nuclear Physics**, accelerator design, **Space** Engineering and **Medical Physics**.*

<img src="https://nukephysik101.files.wordpress.com/2016/01/screenshot-from-2016-01-30-003434.png?w=584" style="float:right;width:50%;padding:6px;">In other words, Geant4 implements our deepest (and best) level of knowledge about Nature‚Ä¶ in the form of computer (C++) code. This *deepest level* is no other thing but the [**Standard Model**](https://en.wikipedia.org/wiki/Standard_Model) of physics. This picture describes the **building blocks of Reality** (the subatomic particles) as well as the **fundamental forces** that govern their interactions. Geant4 acts as some sort of *magnifying lens* that amplifies what happens when a given particle (an electron, a kaon, a muon, or a photon) hits or, better said, *interacts* with its surroundings. This computer toolbox is able to simulate almost all possible scenarios, no matter the actors involved, the geometry or the energy of the event. 

<img src="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRYMxNXRP_19ElbAi0mICSSq9vdLhWSmITg929t_nVKzfbM3CG5" style="float:right;width:25%;padding:0px;">This turns out perfect if we happen to be particle physicists, but it may be felt as *over complicated* for those who just need to model *humbler* atomic interactions for specific fields. One if these specific fields is **Medical Physics** and, in this case, Geant4 has a wonderful and easy to use **Python binding**, g4py. With the help of Docker, g4py is even easier to use. 



## Particle Physics in Medicine

The field of Medical Physics has its own complexity. Subatomic particles can be used to treat cancer or tumours or can be used to ***image* (probe) a patient's body**, i.e., to *see* its inner parts. This last application is the one that will be tackled in this interactive lab. Normally, the type of imaging particle will be the (X-ray) photon, although you'll be able to play with other *probing rays* such as electrons or positrons. Photons can be defined as *particles of light* and were originally proposed by Einstein in one of his [1905 paper](http://astro1.panet.utoledo.edu/~ljc/PE_eng.pdf) *An Heuristic Point of View Toward the Emission and Transformation of Light*. 

![](https://www.ous-research.no/medicalphysics/images/PET_1.JPG)

In Medical Imaging, mid-energy photons (a few keV) are *projected* against the patient. Some of these electromagnetic entities are completely absorbed ([**photoelectric**](https://en.wikipedia.org/wiki/Photoelectric_effect) effect), others are diverted ([**Compton**](https://en.wikipedia.org/wiki/Compton_scattering) scattering) by atoms, and others (if their energy is high enough) can even transform themselves into a pair of new objects composed of a electron and an anti-electron (a *positron*). This last process is called [**pair production**](https://en.wikipedia.org/wiki/Pair_production). In turn, when a positron accidentally hits and electron, they both disappear back into two photons which travel in opposite directions. This is called [**annihilation**](https://en.wikipedia.org/wiki/Electron‚Äìpositron_annihilation) and it's the foundation of [**PET** imaging](https://en.wikipedia.org/wiki/Positron_emission_tomography) (which produces beautiful and lifesaving images such as the one shown above).



## Geant4 and Medical Physics

<img src="https://github.com/pammacdotnet/FFRepo/raw/master/simulation.gif?sanitize=true" style="float:right;width:60%;padding:6px;">As stated above, Geant4 has a *difficult-to-grasp* C++ heart, but **thanks to g4py**, its easy to design simple scenarios related to the field of **Medical Physics** which **radiologists** and **doctors** can even used in their daily practice. However, installing and configuring Geant4 and g4py can turn out awkward. We can *alleviate* this problem with Docker and better yet, we can *play* with a simple, yet interesting simulation thanks to Play with Docker. This simulation consists of the ***following ingredients***: 

* A **world**, or the *simulation limits*. This world has the shape of an empty *elongated cuboid*. The longest axis is the `z` (or longitudinal) axis.
* A **beam** of particles that are initially projected along the aforementioned `z`-axis. This beam has a nature (type of particles), an energy (in *mega-electronvolts* or MeV, for short) and a count (i.e., how many particles). In a real particle physics experiment or setup, generating (and conforming) such a beam has its complexities. However, in a simulated world, we don't have to worry about those. 
* A **target**, or something the particles can *hit* in their way. This target has also cuboid shape, with a width (thickness) and location (both also defined along the same `z`-axis as the world) and is composed of a given (and selectable) material. In Medical Physics, the target is also commonly known as *phantom*. 

You can take a 3D look at this world in the following image:

![](https://tva1.sinaimg.cn/large/0082zybpgy1gc7cxrbxxdj315m0k50xx.jpg)

Or you can also surf a **live WebGL version** by clicking in [this link](https://htmlpreview.github.io/?https://github.com/pammacdotnet/FFRepo/blob/master/simulation%20example.html){:target="_blank"}. A quick (and tiny) animation is also displayed above.

We will now launch **our own simulations**. In order to achieve so, let us first **download the Docker image** that contains the necessary infrastructure. Remember, you can just **click in the code cells to have them** (one by one) **executed** ‚ñ∂Ô∏è in the terminal on the left side of this page:

```.term1
docker pull pammacdotnet/g4lpwd
```

It may take a minute üïê or so to download the whole image‚Ä¶ so please, be (slightly) patient.

------

## Download the simulation code from Github

The **code** of the simple simulation described above can be downloaded by clicking in the next code cell:

```.term1
curl https://raw.githubusercontent.com/pammacdotnet/FFRepo/master/simulation.py -o simulation.py -s
```

We recommend you **take a quick look** (even if you are not a Python or particle physics enthusiast) so that you realise how it is very easy to experiment with modern computer simulations thanks to awesome tools such as g4py:

```.term1
pip install pygments
pygmentize -g simulation.py
```

Also, download (and enable the execution of) this simple Python script to **convert from [WRL](https://en.wikipedia.org/wiki/VRML) data to [x3dom](https://www.x3dom.org)-enabled HTML** content:

```.term1
curl https://raw.githubusercontent.com/pammacdotnet/FFRepo/master/wrl2html.py -o wrl2html.py -s
chmod +x wrl2html.py 
```

This will allow us to visualise **3D scenes** (like the one linked above) in the same Web browser. BTW, this last command  (`wrl2html.py`) uses [this online converter](https://doc.instantreality.org/tools/x3d_encoding_converter/) made by the company [instantreality](https://www.instantreality.org) (part of the [Visual Computing System Technologies Group](http://www.igd.fraunhofer.de/vcst/) which, in turn, belongs to the reputed [Fraunhofer](https://www.fraunhofer.de) Institute). 

------

## First simulation

Let's run our first simulation. It will consist of a beam of 20 photons, each of 1 MeV that hits a water filled target (with a thickness of 20 cm):

```.term1
docker run -v ${PWD}:/root pammacdotnet/g4lpwd
```

You'll see a bunch of information appearing in the terminal:

```
**************************************************************
 Geant4 version Name: geant4-10-04-patch-02    (25-May-2018)
                       Copyright : Geant4 Collaboration
                      References : NIM A 506 (2003), 250-303
                                 : IEEE-TNS 53 (2006), 270-278
                                 : NIM A 835 (2016), 186-225
                             WWW : http://geant4.org/
**************************************************************

Visualization Manager instantiating with verbosity "warnings (3)"...
/tracking/storeTrajectory 1
/tracking/storeTrajectory 2

phot:   for  gamma    SubType= 12  BuildTable= 0
      LambdaPrime table from 200 keV to 100 TeV in 61 bins 
      ===== EM models for the G4Region  DefaultRegionForTheWorld ======
       PhotoElectric :  Emin=        0 eV    Emax=      100 TeV   AngularGenSauterGavrila

compt:   for  gamma    SubType= 13  BuildTable= 1
      Lambda table from 100 eV  to 1 MeV, 7 bins per decade, spline: 1
      LambdaPrime table from 1 MeV to 100 TeV in 56 bins 
      ===== EM models for the G4Region  DefaultRegionForTheWorld ======
‚Ä¶
‚Ä¶
```

This is Geant4 telling you all the calculations it has had to carry out for you in behind the scenes in order to generate a final (and more intuitive) file called `simulation.wrl` (default name). It is now time to launch a **simple web server** that will let us download or view the results:

```.term1
python3 -m http.server 80 > /dev/null 2>&1 &
```

By using the `&` symbol we state we want the web server to run in the background and with the expression  `> /dev/null 2>&1` we guarantee that its output won't bother us. Once started, the previous file can be downloaded from [here](/simulation.wrl){:data-term=".term1"}{:data-port="80"} ‚¨áÔ∏è. It'll take some time because a VRLM file can be quite big. 

Once in your hard drive, you can 3D-navigate/fly through this file (or any VRML scene) with any of the following software:

- [Instant Player](https://www.instantreality.org/downloads/), by [instantreality](https://www.instantreality.org),
- [view3dscene](https://castle-engine.io/view3dscene.php), by [Castle Game Engine](https://castle-engine.io/index.php), 
- [Paraview](https://www.paraview.org), by [Kitware](https://www.kitware.com) and,
- [Blender](https://www.blender.org) (among many others).

Here you can see a screenshot of **view3dscene** (Windows version):

![](https://tva1.sinaimg.cn/large/00831rSTgy1gcj9r1xo84j31f60i2guf.jpg)

However, it is better to **transform the WRL file into WebGL-enabled HTML** with the `wrl2html.py` command tackled above:

```.term1
./wrl2html.py 
```

By default, this last command assumes the input WRL file to have the name `simulation.wrl` and outputs an HTML file called, by default, `simulation.html`. You previous instruction is equivalent to:

```.term1
./wrl2html.py --wrl simulation.wrl --html simulation.html
```

You can fly through this 3D HTML version by clicking [here](/simulation.html){:data-term=".term1"}{:data-port="80"} ‚ÜóÔ∏è, or you can [**list all files**](/){:data-term=".term1"}{:data-port="80"} üìÅ.

------

## More simulations

Let's explore more simulations! You achieve this by altering any of the configurable parameters: 

- **Particle type**. Available with the option `--type`. Possible values are `e-`, `e+` or `gamma`. The default value is `gamma` (also known as photons or, simply, light). 
- **Particle energy**. Available with the option `--energy`. All values are expressed in MeV and should be integer values. The default values is 1 (MeV). Bear in mind that X-rays have more or less 0.1 MeV of energy.
- **Phantom material**. Available with the option `--material`. Geant4 defines many materials: `G4_Al`, `G4_Si`, `G4_Ar`, `G4_Cu`, `G4_Fe`, `G4_Ge`, `G4_Ag`, `G4_W`, `G4_Au`, `G4_Pb`, `G4_AIR`, `G4_Galactic`, `G4_WATER`, `G4_CESIUM_IODIDE`, `G4_SODIUM_IODIDE`, `G4_PLASTIC_SC_VINYLTOLUENE`, `G4_MYLAR`, etc. The default value in our simulations is water (`G4_WATER`). Do you remember that the human body is composed of 70% water?
- **Phantom thickness**. Available with the option `--size`. It is the size (along the longitudinal axis) of the phantom, that is, how much matter the beam of particle will have to traverse. 
- **Output file**. Available with the option `--wrl`. It represents the name of the VRML file with a 3D representation of the simulation. The default value is `simulation.wrl`.
- **Particle count**. Available with the option `--count`. It is the number of particles within the simulated beam. The default value is 20. We suggest that you keep this value under üíØ. Otherwise you'll end up with a huge WRL file, very difficult to manage and visually analyse. 



### Antimatter to the rescue!

For instance, the following command:

```.term1
docker run -v ${PWD}:/root pammacdotnet/g4lpwd --type=e+
```

will **exchange photons for positrons**. Positrons are the antiparticles of electrons. The major difference from electrons is their positive charge. You can either download again the [WRL file](/simulation.wrl){:data-term=".term1"}{:data-port="80"} ‚¨áÔ∏è or generate a new HTML file. If you run again the `wrl2html.py` command with no arguments, the original `simulation.html` file will be overwritten ‚ö†Ô∏è. However you can change the name of the resulting HTML file:

```.term1
./wrl2html.py --html simulation2.html
```

This file is [still browsable](/simulation2.html){:data-term=".term1"}{:data-port="80"} ‚ÜóÔ∏è. 

<img src="http://www.physicscentral.com/explore/action/images/antics-img2.gif" style="float:right;width:20%">Positrons tend to **annihilate with electrons**. When this happens, **two photons emerge** in opposite directions.  As you can see from the following picture, the positrons (yellow traces) suddenly seem to disappear. What is happening is that those positrons find a corresponding electron (attached to the atoms that compose the material) and the mass of both particles is transformed into two photons emerging in any random direction (but opposite ways). 

![](https://tva1.sinaimg.cn/large/00831rSTgy1gcdmiq6fkyj30k906qq3l.jpg)



### Light seems to zigzag!

<img src="https://i.pinimg.com/originals/15/ec/8d/15ec8d1c8d7dded0592b39ebb9075289.jpg" style="float:right;width:20%">Another effect that you will see in the previous simulation is that light rays seem to bend with sharp angles. This is due to the **Compton scattering**. In this process, the path of a photon is diverted by a charged particle, usually an electron. In each scattering event, the ray of light loses energy (decreases its frequency) and its finally *absorbed* by the material. 

![](https://tva1.sinaimg.cn/large/00831rSTgy1gcdmw5bh1lj30jy06zjrs.jpg)



### Superman (o Supergirl)-approved shielding!

Let's now change the particle type to a more common one (electrons) and let's have them collide against a lead target:

```.term1
docker run -v ${PWD}:/root pammacdotnet/g4lpwd --type=e- --material=G4_Pb --wrl simulation3.wrl
./wrl2html.py --wrl simulation3.wrl --html simulation3.html
```

The results are displayed [here](/simulation3.html){:data-term=".term1"}{:data-port="80"} ‚ÜóÔ∏è. Again, you can specify a new WRL file (with the `--wrl` option). As you can see, 1 MeV electrons are unable to penetrate the material. On the contrary, some of them seem to *bounce back*. This is due to electrostatic repulsion against the electronic cloud covering this lead shield.

![](https://tva1.sinaimg.cn/large/00831rSTgy1gcdo3cw7pwj30l6080dgc.jpg)



### Beware of radiation!

Let's repeat the same simulation with a (virtual) water target and with a greater energy:

```.term1
docker run -v ${PWD}:/root pammacdotnet/g4lpwd --type=e- --energy=100 --wrl simulation4.wrl
./wrl2html.py --wrl simulation4.wrl --html simulation4.html
```

<img src="https://web2.uwindsor.ca/courses/physics/high_schools/2006/Medical_Imaging/x%20ray%20brem.gif" style="float:right;width:30%">If you carefully observe the [simulation results](/simulation4.html){:data-term=".term1"}{:data-port="80"} ‚ÜóÔ∏è, you'll notice the famous *electromagnetic showers*. This is the same process that occurs when a cosmic ray hits the upper atmosphere and triggers the generation of new particles. The primary process that we are watching here is ***bremsstrahlung***, which consists in the production of electromagnetic radiation (a photon, represented by a white line) when an electron *decelerates* by the presence of matter.

![](https://tva1.sinaimg.cn/large/00831rSTgy1gcdq6dpi0ij31d40ncq7t.jpg)

Remember you can either download the resulting WRL file or navigate through the x3dom-enabled HTML file. 



### Ionization 

Many of the already proposed simulations exhibit ionisations. In this type of interaction, a photon *hits* an electron (attached to an atom) and produces an ion (i.e., an atom *negatively charged*).   

![](https://tva1.sinaimg.cn/large/00831rSTgy1gcdspm2qgzj30yq0d6jrw.jpg)

The previous simulation was obtained with the following command (and whose results can be explored [here](/simulation5.html){:data-term=".term1"}{:data-port="80"} ‚ÜóÔ∏è):

```.term1
docker run -v ${PWD}:/root pammacdotnet/g4lpwd --type=gamma --energy=10 --material=G4_Al --wrl simulation5.wrl
./wrl2html.py --wrl simulation5.wrl --html simulation5.html
```

Ionisations can also take place when a moving electron hits an atom at rest (well, one of its orbiting electrons), that is, the ionisation particle can be of the same nature as the removed one.

------

## Simulation limits and photoelectric absorption

Let's go back a water-filled cuboid and low energies, but let's *insanely* increase the number of particles (photons). Run the following command in the terminal:

```.term1
docker run -v ${PWD}:/root pammacdotnet/g4lpwd --type=gamma --energy=2 --count=100 --wrl simulation6.wrl
./wrl2html.py --wrl simulation6.wrl --html simulation6.html
```

You'll see an [scenario](/simulation6.html){:data-term=".term1"}{:data-port="80"} ‚ÜóÔ∏è very similar to this one, where the photons, after traveling in straight lines and/or interacting with matter, seem to disappear:

![](https://tva1.sinaimg.cn/large/00831rSTgy1gcdta9jpymj31os0mk0zt.jpg)

Well, where did all the photons go? Well, some of them reach the *world limits*‚Ä¶¬†Do you remember the movie *[The 13th Floor](https://www.imdb.com/title/tt0139809/)*?

<img src="https://66.media.tumblr.com/e1e51070e9065fb3cc74d24e8d59c2cf/tumblr_omq4gg2LUn1w4t58uo1_400.gifv" style="float:right;width:50%;padding:6px;">When this happens, Geant4 stops calculating any further interactions and any particle trace that crosses the boundaries of the simulation seems to suddenly vanish. However, even inside the simulation realm, some photons seem to *evaporate*. What's happening? The answer is simple: they are absorbed by the material. With more detail, these absorption processes correspond to the [**photoelectric effect**](https://en.wikipedia.org/wiki/Photoelectric_effect): photons are completely absorbed by electrons. 

Here you have a second simulation that better shows the previous processes: 

![](https://tva1.sinaimg.cn/large/00831rSTgy1gcexurwrk1j30rw0a3jt5.jpg)

This scene can be recreated with the following command, where a beam of just a few electrons hits an iron target:

```.term1
docker run -v ${PWD}:/root pammacdotnet/g4lpwd --type=e- --material=G4_Fe --count=10 --energy=50 --wrl simulation7.wrl
./wrl2html.py --wrl simulation7.wrl --html simulation7.html
```

Each electron produces in turn an [***electromagnetic shower***](https://en.wikipedia.org/wiki/Particle_shower#Electromagnetic_showers). These showers consist of a bunch of photons that end up *photoelectrically absorbed*. Take [a look](/simulation7.html){:data-term=".term1"}{:data-port="80"} ‚ÜóÔ∏è for yourself (of course, after running the simulation)!



## Energy is *a kind of* matter

<img src="https://j.gifs.com/vOJj9P.gif" style="float:right;width:40%;padding:6px;">Yes, energy can be transformed into matter (and back!)‚Ä¶ as discovered by Einstein in his famous [1905 paper](http://hermes.ffn.ub.es/luisnavarro/nuevo_maletin/Einstein_1905_relativity.pdf): *On the Electrodynamics of Moving Bodies*. BTW, Einstein was also responsible for the explanation of the photoelectric effect, as commented in the introduction above. 


(Not that Einstein!)

Run the following simulation:

```.term1
docker run -v ${PWD}:/root pammacdotnet/g4lpwd --type=gamma --material=G4_WATER --count=10 --energy=15 --wrl simulation8.wrl
./wrl2html.py --wrl simulation8.wrl --html simulation8.html
```

You [will see](/simulation8.html){:data-term=".term1"}{:data-port="80"} ‚ÜóÔ∏è some events like the following, where a photon (with no mass and thus made of pure energy), after colliding with an atom, transfers all its momentum to the creation of two particles: an electron and anti-electron (positron). ![](https://tva1.sinaimg.cn/large/00831rSTgy1gcex54zkp3j31240bm3z0.jpg)

That is: energy (*E*) is eventually converted into matter (*m*), following the famous Einstein equation: *E=m¬∑c¬∑c*, where *c* is the speed of light. This process is known as ***pair production***. 



## Final words

Now it's time for you to play with your own simulations. This includes other materials, energies, particles, etc. As stated above, you can also increase the number of particles, but we suggest you keep this number below 100. This lab is based on the [article](https://iopscience.iop.org/article/10.1088/1361-6404/ab5011) *X-ray imaging virtual online laboratory for engineering undergraduates* (by [Alberto Corbi](http://twitter.com/albertcorbi), [Daniel Burgos](http://www.danielburgos.eu), [Frank Vidal](https://www.bangor.ac.uk/computer-science-and-electronic-engineering/staff/franck-vidal/en), [Francisco Albiol](https://webific.ific.uv.es/web/en/content/albiol-colomer-francisco-javier) and [Alberto Albiol](http://www.upv.es/ficha-personal/alalbiol)) and it has been carried out with success in the first semesters of the [Computing Science degree](https://www.unir.net/ingenieria/grado-informatica/549200001509/) at the [School of Engineering](https://www.unir.net/ingenieria/) of Universidad Internacional de La Rioja ([UNIR](https://www.unir.net)).
